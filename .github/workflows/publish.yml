name: Build and Release macOS App

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: pubspec.yaml
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Import Code Signing Certificate
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          echo "üîê Setting up code signing certificate..."
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12

          echo "üì± Creating and configuring keychain..."
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

          echo "üì¶ Importing certificate..."
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

          echo "üßπ Cleaning up certificate file..."
          rm certificate.p12

          echo "‚úÖ Certificate setup complete. Available identities:"
          security find-identity -v -p codesigning

      - name: Configure Xcode project for CI signing
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "‚öôÔ∏è Configuring Xcode project for CI signing..."
          echo "üìã Original settings:"
          grep -E "(CODE_SIGN_STYLE|DEVELOPMENT_TEAM|CODE_SIGN_IDENTITY)" macos/Runner.xcodeproj/project.pbxproj | head -5

          # Set manual signing for Flutter CI build
          sed -i '' "s/DEVELOPMENT_TEAM = 2KQDYWP72S;/DEVELOPMENT_TEAM = $APPLE_TEAM_ID;/g" macos/Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g" macos/Runner.xcodeproj/project.pbxproj
          sed -i '' 's/"CODE_SIGN_IDENTITY\[sdk=macosx\*\]" = "Apple Development";//g' macos/Runner.xcodeproj/project.pbxproj

          echo "üìù Updated settings:"
          grep -E "(CODE_SIGN_STYLE|DEVELOPMENT_TEAM|CODE_SIGN_IDENTITY)" macos/Runner.xcodeproj/project.pbxproj | head -5
          echo "‚úÖ Xcode project patched for CI manual signing"

      - name: Build macOS app
        run: |
          flutter build macos --release

      - name: Code sign the app
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          APP_PATH=$(find build/macos/Build/Products/Release -name "*.app")

          # Get signing identity
          IDENTITY=$(security find-identity -p codesigning -v | grep "Developer ID Application" | head -n1 | awk -F\" '{print $2}')
          echo "Using identity: $IDENTITY"

          # Sign frameworks first
          echo "Signing frameworks..."
          for framework in "$APP_PATH/Contents/Frameworks"/*.framework; do
              if [ -d "$framework" ]; then
                  echo "Signing $framework"
                  codesign --force --options runtime --sign "$IDENTITY" "$framework"
              fi
          done

          # Sign main binary
          echo "Signing main binary..."
          BINARY_PATH=$(find "$APP_PATH/Contents/MacOS" -type f -perm +111 | head -1)
          codesign --force --options runtime --sign "$IDENTITY" "$BINARY_PATH"

          # Sign app bundle
          echo "Signing app bundle..."
          codesign --deep --force --verify --verbose=2 --options runtime --sign "$IDENTITY" "$APP_PATH"

          # Verify signature (but not with spctl yet - that requires notarization)
          echo "Verifying code signature..."
          codesign --verify --deep --strict --verbose=2 "$APP_PATH"
          echo "‚úÖ Code signature valid (notarization still required for spctl verification)"

      - name: Create zip for notarization
        run: |
          APP_PATH=$(find build/macos/Build/Products/Release -name "*.app")
          APP_NAME=$(basename "$APP_PATH" .app)
          echo "üì¶ Creating zip for notarization..."
          echo "App path: $APP_PATH"
          echo "App name: $APP_NAME"

          cd build/macos/Build/Products/Release
          zip -r "../../../../../$APP_NAME.zip" "$(basename "$APP_PATH")"
          cd ../../../../../

          echo "üìÅ Zip created: $APP_NAME.zip ($(du -h "$APP_NAME.zip" | cut -f1))"
          echo "‚úÖ Ready for notarization"

      - name: Notarize app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          APP_PATH=$(find build/macos/Build/Products/Release -name "*.app")
          APP_NAME=$(basename "$APP_PATH" .app)
          ZIP_PATH="$APP_NAME.zip"

          # Submit to Apple Notary service
          echo "Submitting to Apple Notary service..."
          xcrun notarytool submit "$ZIP_PATH" \
              --apple-id "$APPLE_ID" \
              --team-id "$APPLE_TEAM_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              --wait

          # Staple notarization ticket
          echo "Stapling notarization ticket..."
          xcrun stapler staple "$APP_PATH"

          # Verify stapled app and Gatekeeper approval
          echo "üõ°Ô∏è Verifying Gatekeeper approval..."
          if spctl --verbose=4 --assess --type execute "$APP_PATH"; then
              echo "‚úÖ SUCCESS: App is approved by macOS Gatekeeper!"
              echo "üîí Users will be able to run this app without security warnings"
          else
              echo "‚ùå FAILED: App is NOT approved by Gatekeeper"
              echo "‚ö†Ô∏è Users will see security warnings when trying to run this app"
              exit 1
          fi

      - name: Create DMG (optional - for direct distribution)
        run: |
          APP_PATH=$(find build/macos/Build/Products/Release -name "*.app")
          APP_NAME=$(basename "$APP_PATH" .app)
          hdiutil create -volname "$APP_NAME" -srcfolder "$APP_PATH" -ov -format UDZO "$APP_NAME.dmg"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            *.dmg
            *.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
