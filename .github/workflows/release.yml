name: Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Decode signing certificate
        run: |
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychain -s build.keychain

      - name: Build macOS app
        run: flutter build macos --release

      - name: Prepare app bundle
        run: |
          mkdir -p release/Pinboard\ Wizard.app
          cp -R build/macos/Build/Products/Release/pinboard_wizard.app/* release/Pinboard\ Wizard.app/

      - name: Get signing identity
        id: sign_identity
        run: |
          IDENTITY=$(security find-identity -p codesigning -v | grep "Developer ID Application" | head -n1 | awk -F\" '{print $2}')
          echo "SIGN_IDENTITY=$IDENTITY" >> $GITHUB_ENV

      - name: Sign app with Hardened Runtime and Timestamp
        run: |
          codesign --deep --force --verify --verbose=2 \
            --options runtime --timestamp \
            --sign "$SIGN_IDENTITY" \
            release/Pinboard\ Wizard.app

      - name: Verify code signature
        run: |
          codesign --verify --deep --strict --verbose=2 "release/Pinboard Wizard.app"
          spctl --verbose=4 --assess --type execute "release/Pinboard Wizard.app"

      - name: Prepare notarization zip
        run: |
          cd release
          zip -r "Pinboard Wizard.zip" "Pinboard Wizard.app"
          cd ..

      - name: Notarize app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          set -e
          NOTARIZE_FILE="release/Pinboard Wizard.zip"
          xcrun notarytool submit "$NOTARIZE_FILE" \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --wait
          xcrun notarytool info "$NOTARIZE_FILE" \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            | grep -q '"Status": "Accepted"' || { echo "Notarization failed"; exit 1; }

      - name: Staple notarization ticket
        run: xcrun stapler staple "release/Pinboard Wizard.app"

      - name: Create tarball for release
        run: |
          tar -C release -czf release/pinboard-wizard-${{ github.event.release.tag_name }}-macos.tar.gz "Pinboard Wizard.app"

      - name: Calculate SHA256
        id: sha256
        run: |
          HASH=$(shasum -a 256 release/pinboard-wizard-${{ github.event.release.tag_name }}-macos.tar.gz | cut -d ' ' -f 1)
          echo "SHA256=$HASH" >> $GITHUB_ENV

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} release/pinboard-wizard-${{ github.event.release.tag_name }}-macos.tar.gz --clobber

      - name: Trigger cask update workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/pinboard-wizard-${VERSION}-macos.tar.gz"
          SHA256="$SHA256"

          gh api repos/RikuVan/homebrew-formulae/dispatches \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -f event_type=update-cask \
            -f client_payload[version]=$VERSION \
            -f client_payload[download_url]=$DOWNLOAD_URL \
            -f client_payload[sha256]=$SHA256

      - name: Cleanup keychain
        if: always()
        run: security delete-keychain build.keychain || true
