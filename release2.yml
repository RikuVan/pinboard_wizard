name: Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    timeout-minutes: 30

    env:
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Get dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Decode and import signing certificate
        run: |
          set -euo pipefail
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12

          KEYCHAIN_PASSWORD="build-temp-password"
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          security import certificate.p12 \
            -k ~/Library/Keychains/build.keychain \
            -P "$MACOS_CERTIFICATE_PASSWORD" \
            -T /usr/bin/codesign

          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -s build.keychain login.keychain /Library/Keychains/System.keychain
          rm -f certificate.p12

      - name: Configure Xcode project for CI
        run: |
          # Set manual signing for Flutter CI build
          sed -i '' "s/DEVELOPMENT_TEAM = 2KQDYWP72S;/DEVELOPMENT_TEAM = $APPLE_TEAM_ID;/g" macos/Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g" macos/Runner.xcodeproj/project.pbxproj
          sed -i '' 's/"CODE_SIGN_IDENTITY\[sdk=macosx\*\]" = "Apple Development";//g' macos/Runner.xcodeproj/project.pbxproj
          echo "Patched Xcode project for CI manual signing"

      - name: Build macOS app
        run: flutter build macos --release \
          --build-name=${{ github.event.release.tag_name }} \
          --build-number=${{ github.run_number }}

      - name: Prepare app bundle
        run: |
          mkdir -p release
          cp -R build/macos/Build/Products/Release/pinboard_wizard.app "release/Pinboard Wizard.app"

      - name: Get signing identity
        id: sign_identity
        run: |
          set -euo pipefail
          IDENTITY=$(security find-identity -p codesigning -v | grep "Developer ID Application" | head -n1 | awk -F\" '{print $2}')
          if [ -z "$IDENTITY" ]; then
            echo "No signing identity found!"
            security find-identity -p codesigning -v
            exit 1
          fi
          echo "Using identity: $IDENTITY"
          echo "SIGN_IDENTITY=$IDENTITY" >> $GITHUB_ENV

      - name: Sign app (frameworks + main binary + app bundle)
        run: |
          set -euo pipefail
          APP="release/Pinboard Wizard.app"
          : "${SIGN_IDENTITY:?SIGN_IDENTITY not set}"

          echo "Signing app at: $APP"

          # Check if frameworks directory exists and sign them
          if [ -d "$APP/Contents/Frameworks" ]; then
            echo "Found frameworks directory"
            find "$APP/Contents/Frameworks" -type d -name "*.framework" | while read -r framework; do
              echo "Signing framework: $framework"
              codesign --force --options runtime --sign "$SIGN_IDENTITY" "$framework"
            done
          else
            echo "No frameworks directory found"
          fi

          # Sign main binary
          echo "Signing main binary..."
          codesign --force --options runtime --sign "$SIGN_IDENTITY" "$APP/Contents/MacOS/pinboard_wizard"

          # Sign entire app bundle with deep signing
          echo "Signing app bundle..."
          codesign --deep --force --options runtime --sign "$SIGN_IDENTITY" "$APP" --verbose

      - name: Verify code signature
        run: |
          echo "Verifying code signature..."
          codesign --verify --deep --strict --verbose=2 "release/Pinboard Wizard.app"
          spctl --verbose=4 --assess --type execute "release/Pinboard Wizard.app"

      - name: Prepare notarization zip
        run: |
          cd release
          rm -f "Pinboard Wizard.zip"
          zip -r "Pinboard Wizard.zip" "Pinboard Wizard.app"
          cd ..

      - name: Notarize app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          set -euo pipefail
          NOTARIZE_FILE="release/Pinboard Wizard.zip"

          echo "Submitting to Apple Notary service..."
          xcrun notarytool submit "$NOTARIZE_FILE" \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --wait

          echo "Checking notarization status..."
          xcrun notarytool info "$NOTARIZE_FILE" \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            | grep -q 'status: Accepted' || { echo "Notarization failed"; exit 1; }

      - name: Staple notarization ticket
        run: |
          echo "Stapling notarization ticket..."
          xcrun stapler staple "release/Pinboard Wizard.app"

      - name: Verify stapled app
        run: |
          echo "Verifying stapled app..."
          spctl --verbose=4 --assess --type execute "release/Pinboard Wizard.app"

      - name: Create tarball for release
        run: |
          tar -C release -czf release/pinboard-wizard-${{ github.event.release.tag_name }}-macos.tar.gz "Pinboard Wizard.app"

      - name: Calculate SHA256
        id: sha256
        run: |
          HASH=$(shasum -a 256 release/pinboard-wizard-${{ github.event.release.tag_name }}-macos.tar.gz | cut -d ' ' -f 1)
          echo "SHA256=$HASH" >> $GITHUB_ENV

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} release/pinboard-wizard-${{ github.event.release.tag_name }}-macos.tar.gz --clobber

      - name: Trigger cask update workflow
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/pinboard-wizard-
